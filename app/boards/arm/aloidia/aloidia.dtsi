/*
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>

#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/matrix_transform.h>



/ {
    model = "aloidia";
    compatible = "nguyen-v,aloidia";
    chosen {
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart;
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <20>;
        rows = <5>;
        map = <
// RC(0,0) RC(0,1)   RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8)      RC(0,9)  RC(0,10)        RC(0,11) RC(0,12) RC(0,13) RC(0,14) RC(0,15) RC(0,16) RC(0,18)       RC(0,19)
// RC(1,0) RC(1,1)      RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7)           RC(1,9)  RC(1,10)   RC(1,11) RC(1,12) RC(1,13) RC(1,14) RC(1,15) RC(1,16) RC(1,17) RC(1,18)   RC(1,19)
// RC(2,0) RC(2,1)	        RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7)	       RC(2,9)  RC(2,10)      RC(2,11) RC(2,12) RC(2,13) RC(2,14) RC(2,15) RC(2,16) RC(2,18)         RC(2,19) 
// RC(3,0) RC(3,1)	          RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7)      RC(3,9)  RC(3,10)        RC(3,11) RC(3,12) RC(3,13) RC(3,14) RC(3,15) RC(3,16)       RC(3,18) RC(3,19)
// RC(4,0) RC(4,1)	    RC(4,2) RC(4,3) RC(4,4) RC(4,5)    RC(4,6)    RC(4,7)      RC(4,9)  RC(4,10)        RC(4,11) RC(4,12) RC(4,13)       RC(4,14) RC(4,15) RC(4,16) RC(4,18) RC(4,19)
RC(0,0) RC(0,1)   RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8)           RC(0,11) RC(0,12) RC(0,13) RC(0,14) RC(0,15) RC(0,16) RC(0,18)       RC(0,19)
RC(1,0) RC(1,1)      RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7)           RC(1,11) RC(1,12) RC(1,13) RC(1,14) RC(1,15) RC(1,16) RC(1,17) RC(1,18)   RC(1,19)
RC(2,0) RC(2,1)	        RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7)	          RC(2,11) RC(2,12) RC(2,13) RC(2,14) RC(2,15) RC(2,16) RC(2,18)         RC(2,19) 
RC(3,0) RC(3,1)	          RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7)           RC(3,11) RC(3,12) RC(3,13) RC(3,14) RC(3,15) RC(3,16)       RC(3,18) RC(3,19)
RC(4,0) RC(4,1)	    RC(4,2) RC(4,3) RC(4,4) RC(4,5)    RC(4,6)    RC(4,7)           RC(4,11) RC(4,12) RC(4,13)       RC(4,14) RC(4,15) RC(4,16) RC(4,18) RC(4,19)
  
                                                                RC(4,9)                    RC(4,10)
                                                        RC(3,9) RC(0,9) RC(2,9)   RC(3,10) RC(0,10) RC(2,10)
                                                                RC(1,9)                    RC(1,10)
        >;
    };

    left_encoder_ec11: encoder_left_ec11 {
        compatible = "alps,ec11";
        label = "LEFT_ENCODER_EC11";
        resolution = <4>;
    };

    left_encoder_evq: encoder_left_evq {
        compatible = "alps,ec11";
        label = "LEFT_ENCODER_EVQ";
        resolution = <4>;
    };

    right_encoder_ec11: encoder_right_ec11 {
        compatible = "alps,ec11";
        label = "RIGHT_ENCODER_EC11";
        resolution = <4>;
    };

    right_encoder_evq: encoder_right_evq {
        compatible = "alps,ec11";
        label = "RIGHT_ENCODER_EVQ";
        resolution = <4>;
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        // sensors = <&left_encoder_ec11 &left_encoder_evq &left_encoder_dummy1 &left_encoder_dummy2>;
        sensors = <&left_encoder_ec11 &left_encoder_evq &right_encoder_ec11 &right_encoder_evq>;
    };

    leds {
        compatible = "gpio-leds";
        blue_led: led_0 {
            gpios = <&gpio1 7 GPIO_ACTIVE_HIGH>;
            label = "Blue LED";
        };
        green_led: led_1 {
            gpios = <&gpio1 5 GPIO_ACTIVE_HIGH>;
            label = "Green LED";
        };
    };
};

&left_encoder_ec11 {
	status = "okay";
};

&left_encoder_evq {
	status = "okay";
};

&right_encoder_ec11 {
	status = "okay";
};

&right_encoder_evq {
	status = "okay";
};


&adc {
    status = "okay";
};

&gpiote {
    status = "okay";
};

&gpio0 {
    status = "okay";
};

&gpio1 {
    status = "okay";
};

&usbd {
    status = "okay";
    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
        label = "CDC_ACM_0";
    };
};

&flash0 {
    /*
     * For more information, see:
     * http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        sd_partition: partition@0 {
            label = "softdevice";
            reg = <0x00000000 0x00026000>;
        };
        code_partition: partition@26000 {
            label = "code_partition";
            reg = <0x00026000 0x000c6000>;
        };

        /*
         * The flash starting at 0x000ec000 and ending at
         * 0x000f3fff is reserved for use by the application.
         */

        /*
         * Storage partition will be used by FCB/LittleFS/NVS
         * if enabled.
         */
        storage_partition: partition@ec000 {
            label = "storage";
            reg = <0x000ec000 0x00008000>;
        };

        boot_partition: partition@f4000 {
            label = "adafruit_boot";
            reg = <0x000f4000 0x0000c000>;
        };
    };
};
